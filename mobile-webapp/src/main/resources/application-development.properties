#===== Xml - START =====
#数据库配置
jdbc.url=jdbc:mysql://rm-bp102m1nm9117mfu1.mysql.rds.aliyuncs.com:3306/red_envelope?autoReconnect=true&useUnicode=true&characterEncoding=utf8
jdbc.username=root_red
jdbc.password=UBPm2u6gknjCue

jdbc.initialSize=3
jdbc.minIdle=3
jdbc.maxActive=100
jdbc.maxWait=60000


#requestId-缓存配置
requestId.redis.host=127.0.0.1
requestId.redis.port=6379
requestId.redis.timeout=10000
requestId.redis.database=1

#===== requestId pool config - START =====
#maxTotal 最大连接数, 默认8个
requestId.redis.maxTotal=100
#最小空闲连接数, 默认0；低于minIdle时，将创建新的链接
requestId.redis.minIdle=2
#maxIdle，控制一个pool最多有多少个状态为idle(空闲的)的jedis实例；空闲链接数大于maxIdle时，将进行回收
requestId.redis.maxIdle=20
#获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,  默认-1
requestId.redis.maxWaitMillis=-1
#连接耗尽时是否阻塞, false报异常,true阻塞直到超时, 默认true
requestId.redis.blockWhenExhausted=true
#timeBetweenEvictionRunsMillis，逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1
requestId.redis.timeBetweenEvictionRunsMillis=2000
#minEvictableIdleTimeMillis，逐出连接的最小空闲时间 默认1800000毫秒(30分钟)
requestId.redis.minEvictableIdleTimeMillis=5000
#在获取连接的时候检查有效性, 默认false
requestId.redis.testOnBorrow=true
#在空闲时检查有效性, 默认false
requestId.redis.testWhileIdle=false
#===== requestId pool config - END =====


#SESSION缓存配置
session.cache.redis.host=127.0.0.1
session.cache.redis.port=6379
session.cache.redis.timeout=10000
session.cache.redis.database=2

#===== session pool config - START =====
#maxTotal 最大连接数, 默认8个
session.cache.redis.maxTotal=100
#最小空闲连接数, 默认0；低于minIdle时，将创建新的链接
session.cache.redis.minIdle=2
#maxIdle，控制一个pool最多有多少个状态为idle(空闲的)的jedis实例；空闲链接数大于maxIdle时，将进行回收
session.cache.redis.maxIdle=20
#获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,  默认-1
session.cache.redis.maxWaitMillis=-1
#连接耗尽时是否阻塞, false报异常,true阻塞直到超时, 默认true
session.cache.redis.blockWhenExhausted=true
#timeBetweenEvictionRunsMillis，逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1
session.cache.redis.timeBetweenEvictionRunsMillis=2000
#minEvictableIdleTimeMillis，逐出连接的最小空闲时间 默认1800000毫秒(30分钟)
session.cache.redis.minEvictableIdleTimeMillis=5000
#在获取连接的时候检查有效性, 默认false
session.cache.redis.testOnBorrow=true
#在空闲时检查有效性, 默认false
session.cache.redis.testWhileIdle=false
#===== session pool config - END =====

#user-缓存配置
user.redis.host=127.0.0.1
user.redis.port=6379
user.redis.timeout=10000
user.redis.database=5

#===== user pool config - START =====
#maxTotal 最大连接数, 默认8个
user.redis.maxTotal=100
#最小空闲连接数, 默认0；低于minIdle时，将创建新的链接
user.redis.minIdle=2
#maxIdle，控制一个pool最多有多少个状态为idle(空闲的)的jedis实例；空闲链接数大于maxIdle时，将进行回收
user.redis.maxIdle=20
#获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,  默认-1
user.redis.maxWaitMillis=-1
#连接耗尽时是否阻塞, false报异常,true阻塞直到超时, 默认true
user.redis.blockWhenExhausted=true
#timeBetweenEvictionRunsMillis，逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1
user.redis.timeBetweenEvictionRunsMillis=2000
#minEvictableIdleTimeMillis，逐出连接的最小空闲时间 默认1800000毫秒(30分钟)
user.redis.minEvictableIdleTimeMillis=5000
#在获取连接的时候检查有效性, 默认false
user.redis.testOnBorrow=true
#在空闲时检查有效性, 默认false
user.redis.testWhileIdle=false
#===== user pool config - END =====

#JSAPI_TICKET缓存配置
ticket.cache.redis.host=127.0.0.1
ticket.cache.redis.port=6379
ticket.cache.redis.timeout=10000
ticket.cache.redis.database=7

#===== ticket pool config - START =====
#maxTotal 最大连接数, 默认8个
ticket.cache.redis.maxTotal=100
#最小空闲连接数, 默认0；低于minIdle时，将创建新的链接
ticket.cache.redis.minIdle=2
#maxIdle，控制一个pool最多有多少个状态为idle(空闲的)的jedis实例；空闲链接数大于maxIdle时，将进行回收
ticket.cache.redis.maxIdle=20
#获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,  默认-1
ticket.cache.redis.maxWaitMillis=-1
#连接耗尽时是否阻塞, false报异常,true阻塞直到超时, 默认true
ticket.cache.redis.blockWhenExhausted=true
#timeBetweenEvictionRunsMillis，逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1
ticket.cache.redis.timeBetweenEvictionRunsMillis=2000
#minEvictableIdleTimeMillis，逐出连接的最小空闲时间 默认1800000毫秒(30分钟)
ticket.cache.redis.minEvictableIdleTimeMillis=5000
#在获取连接的时候检查有效性, 默认false
ticket.cache.redis.testOnBorrow=true
#在空闲时检查有效性, 默认false
ticket.cache.redis.testWhileIdle=false
#===== JSAPI_TICKET pool config - END =====


#SHARE_USER_INFO缓存配置
shareUser.cache.redis.host=127.0.0.1
shareUser.cache.redis.port=6379
shareUser.cache.redis.timeout=10000
shareUser.cache.redis.database=8

#===== ticket pool config - START =====
#maxTotal 最大连接数, 默认8个
shareUser.cache.redis.maxTotal=100
#最小空闲连接数, 默认0；低于minIdle时，将创建新的链接
shareUser.cache.redis.minIdle=2
#maxIdle，控制一个pool最多有多少个状态为idle(空闲的)的jedis实例；空闲链接数大于maxIdle时，将进行回收
shareUser.cache.redis.maxIdle=20
#获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,  默认-1
shareUser.cache.redis.maxWaitMillis=-1
#连接耗尽时是否阻塞, false报异常,true阻塞直到超时, 默认true
shareUser.cache.redis.blockWhenExhausted=true
#timeBetweenEvictionRunsMillis，逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1
shareUser.cache.redis.timeBetweenEvictionRunsMillis=2000
#minEvictableIdleTimeMillis，逐出连接的最小空闲时间 默认1800000毫秒(30分钟)
shareUser.cache.redis.minEvictableIdleTimeMillis=5000
#在获取连接的时候检查有效性, 默认false
shareUser.cache.redis.testOnBorrow=true
#在空闲时检查有效性, 默认false
shareUser.cache.redis.testWhileIdle=false
#===== SHARE_USER_INFO pool config - END =====


#===== Xml - END =====

#===== Config - START =====

#security - START
#是否真是发送短信（开发环境时，可能不需要发送短信）
security.realSms=true

#请求中的时间戳与服务器时间允许的最大误差（单位毫秒），小于等于0：表示不验证时间戳
#60000->1分钟
#120000->2分钟
#300000->5分钟
#600000->10分钟
security.timeDeviation=0

#一个手机号每小时只能发送验证码短信设定条数，测试环境，阀值较大
security.verifySmsMaxCountOneHour=100

#一个手机号24小时只能发送验证码短信设定条数，测试环境，阀值较大
security.verifySmsMaxCountOneDay=500

#一个IP地址每小时只能发送验证码短信设定条数，测试环境，阀值较大
security.verifySmsMaxCountForIpOneHour=200

#一个IP地址24小时只能发送验证码短信设定条数，测试环境，阀值较大
security.verifySmsMaxCountForIpOneDay=1000

#短信验证码的有效时长的毫秒数，默认5分钟
security.smsVerifyCodeExpiredTime=300000
#短信验证码的Token有效时长的毫秒数，默认1小时
security.smsVerifyTokenExpiredTime=3600000

#security - END

#开发模式，仅本地开发环境时，设置为true
devModel=true

#调试模式，则生产环境也可以使用，有可能可以输出更多信息
debug=true

#当前服务运行的服务器所在环境位置:如果是非阿里云中,就填空白
#否则如果当前运行在阿里云杭州的ECS中,就填写cn-hangzhou
#其他阿里云区域填写对应的区域region:cn-beijing / cn-hongkong / cn-shanghai / cn-shenzhen / cn-qingdao / us-west-1(美国硅谷) / ap-southeast-1(亚太(新加坡))
serverRuntimeRegion=

#临时文件目录，一定以“分隔符”结尾
tmpDirectory=/tmp/red_envelope_webapp/

#请求中的时间戳与服务器时间允许的最大误差（单位秒），小于等于0：表示不验证时间戳
#60->1分钟
#120->2分钟
#300->5分钟
#600->10分钟
securityTimeDeviation=300


#weixin config - start
#在微信浏览器中网页登录配置
weixinLoginCfgInWeixinBrowser.appId=wxf88b3b4dcf29c53e
weixinLoginCfgInWeixinBrowser.appSecret=c6ab1a553eda4e2e170c75241face9d6

#微信支付
weixinPay.appid=wx11abce8480b77bfb
weixinPay.appSecret=6KvmzCjH4VHJfUYfCswz7xm7REfTuyt9
weixinPay.mchId=1368218402
weixinPay.keyStorePassword=1368218402
weixinPay.keyStoreFilePath=/Users/Summer/Desktop/red-cert/apiclient_cert.p12

#weixin config - end

#红包域名
baseUrl=http://dev.lswuyou.cn
#baseUrl=http://192.168.2.10:8088
#===== Config - END =====
